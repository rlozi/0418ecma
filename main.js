
//const로 선언된 변수는 덮어쓰는것이 불가능합니다.
// const info = "엄청 중요한 정보";


//예외사항 
//배열과 객체는 참조형 자료이기 때문에 밑에서 다시 작성할 경우 재선언을 하는것이 아니라 참조값을 변경하는 것이기 때문에 예외사항으로 적용이 가능합니다. 
//재선언의 개념으로 접근하는것이 아니라 참조값을 변경하는 개념이기 때문에 변경이 가능한것
// const student = {
//     name : "mike";
//     age : 28 
// }

// student.name = "이은지";
// console.log(student);


/*호이스팅(퍼블리싱 면접★설명가능해야함)
지역변수에 선언된 변수가 최상위 전역변수로 끌어져 올라가는 것 처럼 보이는 현상
올라가는 현상이었다면 밑에 예시에서 결과는 undefined가 아니라 test가 담겨야함 
하지만 test가 아닌것은 올라가지는것이 아니라 올라가는 것 처럼 보이는 현상이기 떄문이다. 
또한 undefined도 자료형의 값이므로 오류현상이긴 하지만 값이 존재하는것으로 취급합니다.(실제로는 존재하지 않음) 

*/

// console.log(info);
// var info = "test"; //undefined 라고 뜸 (에러가 아님 자료형으로 무언가 존재한다는 의미)


// 에크마6 문법에서 호이스팅 방지를 위해서 let이라는 변수선언을 만들었음 
// console.log(info);
// let info = "test"; // Error가 뜸 

/*let은 정상적으로 에러상황을 콘솔로 찍어주고 있으나 let이 호이스팅을 없애는 것은 아니다.
어떻게 해결하였냐면? 데드존을 만들어서 호이스팅의 결과를 데드존으로 설정해서 극복한 것 (그냥 그렇다고 알아만 두기 일단) 
호이스팅이 존재하나 그것을 차단시켜서 극복시킨것이기 때문에 호이스팅이 없는것은 아님 (면접질문, 호이스팅 극복한 사례가 있는지 )
*/

// function test(){
//     var local = "지역변수";
// }
// console.log(local); 지역변수로 선언해놓고 전역변수로 불러온것임

// if(true){
//     var local1 = "일반코드 블록안에서의 지역변수";
// }
// console.log(local1); // 지역변수인데 전역으로 끄집어져 나옴(원래나오면안됌) 이게 호이스팅 현상 

/*
일반 함수의 코드블록에서는 지역변수 scope가 유지가 됩니다. 즉 구역밖에서는 변수가 정의되지 않습니다.
하지만 일반 조건문이나 반복문같은 코드 블록안에서는 var로 선언된 지역변수는 호이스팅으로 전역화 됩니다. 
*/

// if(true) {
//     let local1 = "일반코드 블록안에서의 지역변수";
// }
// console.log(local1);
//let으로 선언하게 되면 호이스팅이 극복되어 정상적인 scope를 가집니다. 

// 자바,에크마6 문법 다 정리해주실건데 외우지말고 실습을 하다가 에러가 나ㄱ거나 막혓을때 정리한걸 보면서 정리하기 


// var btns =document.querySelectorAll("button");

// for(var i=0; i < btns.length; i++){ //0에서부터 length까지 도는걸 의미 
//     btns[i].addEventListener("click",function() {
//         console.log(i); //반복을 다 돌고 최종적인 i를 의미
//     })
// } i=3 , 다 된 결과값이 3만...오류때문에 찍힘

/*
반복문 코드 블록안에 있는 변수 var가 지역변수임에도 불구하고
반복문이기때문에 호이스팅이 일이나서 i값이 반복문 안에서 반복이 끝난 후 사라지지 않고 마지막 카운트 3의 값이 
전역 변수로 등록되어 버린 현상입니다. (원래라면 값은 3이 아니라 2로 나와야함 (0,1,2))
반복이 일어나면서 i++로 인해서 i는 3이된채 for(var i=0; i < btns.length; i++)을 만나지만 
조건에 맞지 않아서 원래는 무시되고 버려져야하는 i라는 값이 호이스팅이 되면서 전역변수로 넘어가버려서 살아있게 됩니다. 
*/


//에크마5 문법에서 호이스팅을 극복하는 방법
//즉시실행함수를 사용하여 안쪽의 변수값이 전역화 되지 않도록 강제로 캡슐화(은닉화) 시키는 방법(개념만 알고있기)
// var btns =document.querySelectorAll("button");

// for(var i= 0; i < btns.length; i++) { 
//     (function () {
//         btns[i].addEventListener("click",function() {
//             console.log(i); 
//         })
//     }) (i)  //i가 아니면 들어올수도 나갈수도 없게 만듦
// } 결과값이 3,, 에크마5는 문제를 완벽하게 해결하지 못함


//에크마 6문법에서 사용하는 방법은 let 
//let으로 호이스팅을 막아 전역변수가 되지 않기 떄문에 지역변수로의 i가 온전하게 작동됩니다. 따라서 각 i의 인덱스 값은 해당 이벤트 발생된 시점에서의 i값으로 인식되어 버튼 클릭시 각 인덱스의 
//값을 콘솔로 반환해주는 것 입니다. 

var btns =document.querySelectorAll("button"); //밖의 var를 바꾸는건 큰 의미가 없음

for(let i=0; i < btns.length; i++){ 
    btns[i].addEventListener("click",function() {
        console.log(i); 
    })
}